{
  "version": 3,
  "sources": ["../../src/start.ts", "../../src/assets/security/hashes.ts", "../../src/components/Images.ts", "../../src/components/Floating.ts", "../../src/pages/ColorApp.ts", "../../src/assets/render/render.ts", "../../src/index.ts"],
  "sourcesContent": ["import Render from './assets/render/render';\n\nexport default async function Start(start: HTMLElement): Promise<void> {\n  \n    start.innerHTML = (`\n        <div>\n            <div id='TS'></div>\n            <div id='float'></div>\n        </div>\n    `)\n  \n    // Dynamically import and execute the Render function\n    Render();\n  }\n  ", "const GenerateHashes = new Set();\n\nexport default function UniqueHash() {\n    let hash;\n    do {\n        hash = Math.random().toString(36).substring(2);\n    } while (GenerateHashes.has(hash));\n    GenerateHashes.add(hash);\n    return hash;\n}", "import { Image } from \"./types/TypeOf\";\n\nexport const\n        TSImg : Image = {\n                image: 'images/Typescript.png',\n                alt: 'Typescript Image'\n        },\n        esbuildImg : Image = {\n                image: 'images/esbuild.png',\n                alt: 'esbuild image'\n        },\n        GitImg: Image = {\n                image: 'images/github.png',\n                alt: 'github image'\n        }", "import './Floating.css'\nimport { TSImg } from './Images';\n\nexport default function Floating(DOM: HTMLDivElement) {\n\n  DOM.innerHTML = (`\n    <div class='float'>\n       <h2>Color Hex Tool</h2>\n       <div class='logo'>\n            <img src=${TSImg.image} alt=${TSImg.alt} >\n       </div>\n    </div>\n  `);\n\n}", "import './Color.css'\nimport { NumberBoolean, ObjectNull, RGB } from './types';\n\nexport default function ColorApp(DOM: HTMLDivElement) {\n\n    DOM.innerHTML = (`\n            <div class='container'>\n                <h1 class='titler'>ColorApp</h1>\n                <p>Lighten / Darken</p>\n                <label for=\"hex\">Color (Hex)</label>\n                <input type=\"text\" name=\"hex\" id=\"hexInput\" \n                    placeholder=\"#000000\" value=\"#c6d5ac\"/>\n                <div class=\"toggle\">\n                    <p id=\"lightenText\" \n                        class=\"toggle-text\">Lighten</p>\n                    <div id=\"toggleBtn\" class=\"toggle-btn\">\n                        <div class=\"inner-circle\"></div>\n                    </div>\n                    <p id=\"darkenText\" \n                        class=\"toggle-text unselected\">Darken</p>\n                </div>\n                <label for=\"slider\" id=\"sliderText\">0%</label>\n                <input type=\"range\" min=\"0\" max=\"100\" value=\"0\"\n                    class=\"slider\" id=\"slider\" name=\"slider\" />\n                <p>Input Color</p>\n                <div id=\"inputColor\" class=\"box\"></div>\n                <p id='alteredColorText'>Altered Color</p>\n                <div id=\"alteredColor\" class=\"box\"></div>\n            </div>\n        `)\n\n    const hexInput = document.getElementById('hexInput') as HTMLInputElement | null;\n    const inputColor = document.getElementById('inputColor') as HTMLDivElement | null;\n    const alteredColor = document.getElementById('alteredColor') as HTMLDivElement | null;\n    const alteredColorText = document.getElementById('alteredColorText') as HTMLParagraphElement | null;\n    const sliderText = document.getElementById('sliderText') as HTMLLabelElement | null;\n    const slider = document.getElementById('slider') as HTMLInputElement | null;\n    const lightenText = document.getElementById('lightenText') as HTMLParagraphElement | null;\n    const darkenText = document.getElementById('darkenText') as HTMLParagraphElement | null;\n    const toggleBtn = document.getElementById('toggleBtn') as HTMLDivElement | null;\n\n    toggleBtn?.addEventListener('click', () => {\n        if(toggleBtn.classList.contains('toggled')){\n            toggleBtn.classList.remove('toggled');\n            lightenText!.classList.remove('unselected');\n            darkenText!.classList.add('unselected');\n          } else {\n            toggleBtn.classList.add('toggled');\n            lightenText!.classList.add('unselected');\n            darkenText!.classList.remove('unselected');\n          } \n          resetPercentage()\n    })\n\n    hexInput?.addEventListener('keyup', (): void => {\n        const hex = hexInput.value;\n        if (!hexVerifier(hex)) return;\n        const strippedHex = hex.replace('#', '');\n\n        inputColor!.style.backgroundColor = \"#\" + strippedHex;\n        resetPercentage()\n    })\n\n    const hexVerifier = (hex: string): NumberBoolean => {\n        if (!hex) {\n            hexInput!.style.backgroundColor = 'red'\n            return false;\n        }\n        hexInput!.style.backgroundColor = 'white'\n\n        const strippedHex = hex.replace('#', '')\n        return strippedHex.length === 3 || strippedHex.length === 6;\n    }\n\n    const convertHexToRGB = (hex: string): ObjectNull => {\n        if (!hexVerifier(hex)) return null;\n\n        let strippedHex = hex.replace('#', '');\n\n        if (strippedHex.length === 3) {\n            strippedHex = strippedHex[0] + strippedHex[0]\n                + strippedHex[1] + strippedHex[1]\n                + strippedHex[2] + strippedHex[2];\n        }\n\n        const r = parseInt(strippedHex.substring(0, 2), 16);\n        const g = parseInt(strippedHex.substring(2, 4), 16);\n        const b = parseInt(strippedHex.substring(4, 6), 16);\n\n        if (isNaN(r) || isNaN(g) || isNaN(b)) {\n            return null;\n        }\n\n        return { r, g, b }\n    }\n\n    const convertRGBToHex = (r: number, g: number, b: number): string => {\n        const firstPair = (\"0\" + r.toString(16)).slice(-2);\n        const secondPair = (\"0\" + g.toString(16)).slice(-2);\n        const thirdPair = (\"0\" + b.toString(16)).slice(-2);\n\n        const hex = \"#\" + firstPair + secondPair + thirdPair;\n        return hex;\n    }\n\n    const alterColorByPercentage = (hex: string, percentage: string): string | null => {\n        const { r, g, b } = convertHexToRGB(hex) as RGB;\n\n        const amount = Math.floor((parseInt(percentage) / 100) * 255);\n\n        const newR = increaseWithin0To255(r, amount);\n        const newG = increaseWithin0To255(g, amount)\n        const newB = increaseWithin0To255(b, amount)\n\n        return convertRGBToHex(newR, newG, newB);\n    };\n\n    const resetPercentage = () =>{\n        slider!.value = (0).toString();\n        sliderText!.innerText=`0%`;\n        alteredColor!.style.backgroundColor = hexInput!.value;\n        alteredColorText!.innerText = `Altered Color ${hexInput?.value}`; \n    }\n\n    const increaseWithin0To255 = (hex: number, amount: number): number => {\n        return Math.min(255, Math.max(0, hex + amount));\n    }\n\n    slider?.addEventListener('input', (): void | null => {\n        if (!hexVerifier(hexInput!.value)) return null;\n        sliderText!.textContent = `${slider.value}%`;\n        const valueAddition  = \n        toggleBtn?.classList.contains('toggled') ? -slider.value : slider.value;\n        const alteredHex = alterColorByPercentage(hexInput!.value, valueAddition.toString());\n        alteredColor!.style.backgroundColor = alteredHex!;\n        alteredColorText!.innerText = `Altered Color ${alteredHex}`;\n    })\n\n}", "import Floating from \"../../components/Floating\";\nimport ColorApp from \"../../pages/ColorApp\"\n\nexport default function Render(){\n\n  const TSDOM = document.querySelector('#TS') as HTMLDivElement | null\n  const FloatComponent = document.querySelector('#float') as HTMLDivElement | null;\n  {TSDOM && ColorApp(TSDOM)}\n  {FloatComponent && Floating(FloatComponent)}\n\n}", "import './assets/css/index.css';\nimport 'animate.css'\n\n// Lazy loads \n\nconst loadStart = async () => {\n    const module = await import('./start');\n    return module.default;\n};\n\nconst loadUniqueHash = async () => {\n    const module = await import('./assets/security/hashes');\n    return module.default;\n};\n\n\nconst DOM = document.querySelector('#app') as HTMLElement;\n\nPromise.all([loadStart(), loadUniqueHash()]).then(([Start, UniqueHash]) => {\n    DOM.id = UniqueHash();\n    Start(DOM);\n});\n\n// Typescript Webpack 5.88.1 Lazy loads"],
  "mappings": "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",
  "names": []
}
